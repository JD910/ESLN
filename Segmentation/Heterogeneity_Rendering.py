# This is the heterogeneity rendering of the lung nodule images generated by LNHG model.
# "JET" function in "cv2" was used to the rendering.

import cv2
from skimage import io

#Input: The output of LNHG model (with a batch size), and the corresponding original CT images (with a batch size)
#Output: The intra-nodular heterogeneity images.

def heterogeneity_rendering(output_LNHG, original_CT):
  for m_batch in range(0, batch_size):
    size_depth = output_LNHG.size()[1]  #depth of the output image
    for depth in range(0, size_depth):
      seg = output_LNHG.data[m_batch, depth, :, :].squeeze()
      seg = (seg - torch.min(seg))/(torch.max(seg)-torch.min(seg)) # Normalization for rendering in cv2 
      seg_numpy = seg.cpu().numpy()

      original = original_CT[m_batch, m_image, :, :].squeeze()             
      original = (original - torch.min(original))/(torch.max(original)-torch.min(original))
      original_numpy = original.cpu().numpy()

      seg_numpy = cv2.cvtColor(np.uint8(seg_numpy*255), cv2.COLOR_GRAY2BGR)
      original_numpy = cv2.cvtColor(np.uint8(original_numpy*255), cv2.COLOR_GRAY2BGR)
      seg_numpy2 = cv2.cvtColor(seg_numpy, cv2.COLOR_BGR2GRAY)
      
      RGB_Seg = cv2.applyColorMap(seg_numpy, cv2.COLORMAP_JET)
      ret, mask = cv2.threshold(seg_numpy2, 0, 255, cv2.THRESH_BINARY)
      mask_not = cv2.bitwise_not(mask)

      original_numpy_bg = cv2.bitwise_and(original_numpy,original_numpy,mask = mask_not) # background, original CT
      RGB_Seg_fg = cv2.bitwise_and(RGB_Seg, RGB_Seg, mask = mask) # foreground, the lung nodule image with intra-nodular heterogeneous activity
      dst = cv2.add(original_numpy_bg,RGB_Seg_fg)
      dst = torch.tensor(dst)
      
      #store the intra-nodular heterogeneity image
      filename_dst = "Your Storage Path" + ".jpg"
      io.imsave(filename_dst, dst, quality=100)
